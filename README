# Here are all the routes in this REST API as well as what they do and how to access them

### Base Production URL: https://caltracker-backend-988509e33b53.herokuapp.com/

### Auth Routes
- /auth
    - POST: needs an email and password in the req.body. Returns a JWT cookie (1-day expiry) and access token (2-hr expiry) which you will use to access all the routes except for the ones that return all table info & the create new user route. This is how you log in (this route automatically checks if a user exists with these credentials).
- /auth/refresh
    - GET: needs a JWT cookie. Returns a new valid access token that the frontend can use to access other routes. This is how you refresh an expired access token.
- /auth/logout
    - POST: doesn't need anything, but ideally you'll have a JWT cookie. This route will simply clear that cookie if it exists, which is how you wanna log out in the frontend.

### User Routes
- /users/all 
    - GET: does not need anything. Returns all of the user objects that are stored in the users table in MySQL. This is how you can check the status of that table.
- /users
    - POST: needs (in req.body): email, password, first_name, last_name, birth_day ('YYYY-MM-DD'), sex, weight, height, target_calories, timezone (specifically formatted). Creates a new user & returns the new created user object. Cannot be duplicate emails in the users table. Also creates a new daily total for the user for the current day.
(Protected routes by access token)
- /users/:id
    - GET: needs field id in the req.params. Returns the user object from the user table of the user with that id
- /users
    - GET: needs an email in the req.query. Returns the user object with that email. You'll use this route when you're loading the data of a pinned user when searching them up.
    - PATCH: needs user_id, password, sex, weight, height, target_calories, timezone, pinned_user_1_id, pinned_user_2_id, pinned_user_3_id, pinned_user_4_id, pinned_user_5_id in the req.body.
    - DELETE: needs user_id in the req.body. Deletes the user object with that id if it exists.

### Daily Totals Routes
- /daily_totals/all
    - GET: does not need anything. Returns all of the daily_total objects that are stored in the daily_totals table in MySQL. This is how you can check the status of that table.
(Protected routes by access token)
- /daily_totals
    - POST: needs the user_id (req.body) of the person who's daily total it is. Updates the current_daily_total field for the current user & returns the new daily_total object. This route is really only invoked by the CRON script, so you shouldn't have to worry about this on the frontend.
    - DELETE: needs the user_id (req.body) of the totals you wanna delete. Will delete all daily totals for the user earlier than the 7th latest created daily_total. Also deletes any entries associated with it, so 2 birds 1 stone type thing.
    - GET: needs the user_id (req.query) of the tutorials you wanna retreive. Retreives the last 7 daily totals with that user_id.
- /daily_totals/:id
    - GET: needs the daily_total_id in the req.params of the current daily total you wanna receive. Returns that daily_total object. You would use this route when you wanna retreive the current daily total of some user, and you would get that id by looking in the current_daily_total_id of the user you are storing.

### Entries Routes
- /entries/all
    - GET: does not need anything. gets all of the entries in the entries table. This is how you check the status of that table.
(Protected routes by access token)
- /entries
    - POST: needs user_id, food_name, description, num_calories in the req.body. Returns that new entry object. The new created entry object will also have a daily_total_id of the user's current daily total.
    - GET: needs user_id in the req.query. Returns today's entries for that user.
    - DELETE: needs the entry_id (req.body) of the entry you wanna delete. Deletes it from the DB if it exists & updates the daily total accordingly. Should work for entries of past days as well, though I don't think we should allow those to be updated in the frontend.
    - PATCH: needs entry_id, food_name, description, num_calories in req.body. Modifies the entry object accordingly and changes the daily total to reflect that. In the frontend, we should only allow updating entries the day of, but this should work even if these are past entries.

## How to access protected routes
- Hit the POST on the /auth route to log in, and then you'll have an access token valid for 2 hours and a cookie. You then need to have a header called Authorization for all of your other requests, and the value in that header should be 'Bearer ' + your access token. If this access token is expired (its expiry time is embedded in the token itself), then hit the refresh endpoint and get a new access token. If you're confused, follow what I did in this repo: (https://github.com/U4EaData/Landing-Page/blob/main/src/components/userdashboard/UserDashboard.js)